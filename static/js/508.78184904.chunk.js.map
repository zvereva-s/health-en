{"version":3,"file":"static/js/508.78184904.chunk.js","mappings":"8JACA,EAAwB,0BAAxB,EAA+D,uD,SCM/D,SAASA,EAAT,GAYI,IAXFC,EAWC,EAXDA,MACAC,EAUC,EAVDA,KACAC,EASC,EATDA,KACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,SACAC,EAMC,EANDA,YACAC,EAKC,EALDA,SACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,UACAC,EAEC,EAFDA,QACAC,EACC,EADDA,MAEMC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAC7BC,EAAcP,EAAQQ,EAAoBA,EAChD,OACE,2BACGf,IAAS,kBAAOgB,QAASL,EAAhB,SAAqBX,KAC/B,kBACEQ,UAAS,UAAKM,EAAL,YAAoBN,GAC7BG,GAAIA,EACJV,KAAMA,EACNC,KAAMA,EACNC,MAAOA,EACPC,SAAUA,EACVC,YAAaA,EACbC,SAAUA,EACVG,QAASA,EACTC,MAAOA,OAKf,QAEAX,EAAUkB,aAAe,CACrBb,SAAU,aACVC,YAAa,e,+DChBjB,IA1BgB,SAAC,GAA8B,IAA7Ba,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aACxB,GAA0BC,EAAAA,EAAAA,WAAS,UAAID,IAAvC,eAAOE,EAAP,KAAcC,EAAd,KAgBMC,EAAQ,WACdD,GAAS,UACFH,KAIP,MAAO,CAACE,MAAAA,EAAOC,SAAAA,EAAUE,aApBJ,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXxB,EAA+BwB,EAA/BxB,KAAME,EAAyBsB,EAAzBtB,MAAOD,EAAkBuB,EAAlBvB,KAAMwB,EAAYD,EAAZC,QACrBC,EAAoB,aAATzB,EAAsBwB,EAAUvB,EACjDmB,GAAS,SAAAM,GAAS,yBACXA,GADW,cAEb3B,EAAO0B,QAeuBE,aAXlB,SAACC,GAClBA,EAAEC,iBACFb,GAAS,UAAIG,IACbE,KAQiDA,MAAAA,K","sources":["webpack://slimmom/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"text-field_input__YM8fs\",\"inputGrams\":\"text-field_inputGrams__bcxNb text-field_input__YM8fs\"};","import { useMemo } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\n\n\nimport styles from './text-field.module.css';\n\nfunction TextField({\n  label,\n  name,\n  type,\n  value,\n  onChange,\n  placeholder,\n  required,\n  style,\n  className,\n  pattern,\n  title,\n}) {\n  const id = useMemo(() => nanoid(), []);\n  const fieldStyles = style ? styles.inputGrams : styles.input;\n  return (\n    <div>\n      {label && <label htmlFor={id}>{label}</label>}\n      <input\n        className={`${fieldStyles} ${className}`}\n        id={id}\n        name={name}\n        type={type}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        pattern={pattern}\n        title={title}\n      />\n    </div>\n  );\n}\nexport default TextField;\n\nTextField.defaultProps = {\n    onChange: () => { },\n    placeholder: \"Input data\"\n}\n\nTextField.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    label: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool,\n    style: PropTypes.string,\n    className: PropTypes.string,\n    pattern: PropTypes.string,\n    title: PropTypes.string,\n}","import {useState} from \"react\";\n    \nconst useForm = ({onSubmit, initialState}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        reset();\n    };\n    const reset = () => {\n    setState({\n        ...initialState\n      })\n  }\n\n    return {state, setState, handleChange, handleSubmit, reset};\n}\n\nexport default useForm;"],"names":["TextField","label","name","type","value","onChange","placeholder","required","style","className","pattern","title","id","useMemo","nanoid","fieldStyles","styles","htmlFor","defaultProps","onSubmit","initialState","useState","state","setState","reset","handleChange","target","checked","newValue","prevState","handleSubmit","e","preventDefault"],"sourceRoot":""}